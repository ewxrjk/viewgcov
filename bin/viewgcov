#! /usr/bin/perl -w
use strict;
use warnings;
use Gtk2 '-init';
use Greenend::ViewGCOV::AnnotatedFile;
use Greenend::ViewGCOV::Window;
use File::Spec;

=head1 NAME

viewgcov - view gcov output

=head1 SYNOPSIS

B<viewgcov> [I<OPTIONS>] [B<-->] I<DIRECTORY>

=head1 DESCRIPTION

This program displays all the B<*.gcov> files below I<DIRECTORY>, in
descending coverage order.  Click on the filenames to see the
contents, with uncovered lines marked in red.  Hover over the source
display for additional information.

=head1 FILE MENU

=over 4

=item New Window

Opens a new window (onto the same directory).

=item Open

Open a new directory (in the same window).

=item Refresh

Re-run B<gcov> on all source files.

=item Compile

Runs B<make>.

=item Run Tests

Runs B<make check> and then runs B<gcov> to regenerate coverage data.

=item Close

Closes the window.

=item Quit

Closes all windows.

=back

=head1 OPTIONS

=over 4

=item B<--help>

Displays a usage message.

=item B<--version>

Displays a version string.

=back

=head1 AUTHOR

Richard Kettlewell <rjk@greenend.org.uk>

=cut

our $VERSION = '0.2';

# Command line ----------------------------------------------------------------

while(@ARGV > 0 and $ARGV[0] =~ /^-/) {
    my $opt = shift;
    if($opt eq "--help") {
        print
"Usage:
  viewgcov [OPTIONS] [--] [DIRECTORY]

Options:
  --help       Display usage message
  --version    Display version string

Displays gcov output files below DIRECTORY (default=\".\").
";
        exit 0;
    } elsif($opt eq '--version') {
        print "$VERSION\n";
        exit 0;
    } elsif($opt eq "--") {
        last;
    } else {
        die "ERROR: unknown option '$opt'\n";
    }
}

# Create the UI ---------------------------------------------------------------

my $window = new Greenend::ViewGCOV::Window();

# Fill in initial files -------------------------------------------------------

my $directory = ".";
if(@ARGV > 0) {
    $directory = shift;
    die "ERROR: specify at most one directory\n" if @ARGV > 0;
}
$directory = File::Spec->rel2abs($directory);
die "ERROR: $directory is not readable\n" 
    if !-r $directory or !-x $directory;
die "ERROR: $directory is not a directory\n" 
    if !-d $directory;
$window->{files}->setDirectory($directory);

# Run the UI ------------------------------------------------------------------

Gtk2->main();
